"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/sermons/new/page",{

/***/ "(app-pages-browser)/./src/lib/message-generator.ts":
/*!**************************************!*\
  !*** ./src/lib/message-generator.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateWeeklyMessages: () => (/* binding */ generateWeeklyMessages),\n/* harmony export */   getScheduledMessages: () => (/* binding */ getScheduledMessages),\n/* harmony export */   saveScheduledMessages: () => (/* binding */ saveScheduledMessages),\n/* harmony export */   updateMessageStatus: () => (/* binding */ updateMessageStatus)\n/* harmony export */ });\n/* harmony import */ var _types_message_template__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/message-template */ \"(app-pages-browser)/./src/types/message-template.ts\");\n/* harmony import */ var _lib_kakao_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/kakao-api */ \"(app-pages-browser)/./src/lib/kakao-api.ts\");\n\n\n// 메시지 생성 설정\nconst MESSAGE_CONFIG = {\n    church_name: '은혜교회',\n    pastor_phone: '010-1234-5678',\n    domain: 'https://your-domain.com' // 실제 배포 시 변경 필요\n};\n// 템플릿 변수 치환 함수\nconst replaceTemplateVariables = (template, variables)=>{\n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key)=>{\n        return variables[key] || match;\n    });\n};\n// 설교 내용을 바탕으로 각 요일별 메시지 생성\nconst generateWeeklyMessages = (sermon)=>{\n    const messages = [];\n    // 기본 변수들\n    const baseVariables = {\n        church_name: MESSAGE_CONFIG.church_name,\n        pastor_phone: MESSAGE_CONFIG.pastor_phone,\n        domain: MESSAGE_CONFIG.domain,\n        sermon_id: sermon.id,\n        sermon_title: sermon.title,\n        scripture: sermon.scripture,\n        summary: sermon.summary\n    };\n    // 설교 날짜 기준으로 발송 날짜 계산\n    const sermonDate = new Date(sermon.date);\n    _types_message_template__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_TEMPLATES.forEach((template)=>{\n        var _template_button_template;\n        // 발송 날짜 계산\n        const sendDate = new Date(sermonDate);\n        const daysToAdd = template.schedule.day_of_week - sermonDate.getDay();\n        sendDate.setDate(sermonDate.getDate() + (daysToAdd > 0 ? daysToAdd : daysToAdd + 7));\n        sendDate.setHours(template.schedule.hour, template.schedule.minute, 0, 0);\n        // 각 템플릿별 특화 변수\n        let specificVariables = {\n            ...baseVariables\n        };\n        switch(template.type){\n            case 'monday':\n                break;\n            case 'wednesday':\n                // 수요일: 묵상 질문 추출\n                const meditationLines = sermon.meditation.split('\\n');\n                const questions = meditationLines.filter((line)=>line.includes('?') || line.includes('묵상')).slice(0, 2).map((q, i)=>\"\".concat(i + 1, \". \").concat(q.trim())).join('\\n');\n                specificVariables.meditation_questions = questions || '오늘 받은 은혜를 돌아보며 하나님께 감사드리세요.';\n                break;\n            case 'friday':\n                // 금요일: 실천과제 체크리스트\n                const tasks = sermon.practical_tasks.slice(0, 3).map((task, i)=>\"\".concat(i + 1, \". \").concat(task)).join('\\n');\n                specificVariables.practical_tasks = tasks;\n                break;\n        }\n        // 메시지 내용 생성\n        const content = replaceTemplateVariables(template.content_template, specificVariables);\n        // 버튼 URL 변수 치환\n        const buttons = ((_template_button_template = template.button_template) === null || _template_button_template === void 0 ? void 0 : _template_button_template.map((btn)=>({\n                ...btn,\n                url: btn.url ? replaceTemplateVariables(btn.url, specificVariables) : btn.url\n            }))) || [];\n        // 실제 교인 목록에서 메시지 수신자 조회\n        let recipients = [];\n        try {\n            const { memberStorage } = __webpack_require__(/*! @/lib/member-storage */ \"(app-pages-browser)/./src/lib/member-storage.ts\");\n            // 메시지 타입별 수신자 조회\n            let messageType;\n            switch(template.type){\n                case 'monday':\n                    messageType = 'receive_sermon_summary';\n                    break;\n                case 'wednesday':\n                    messageType = 'receive_meditation';\n                    break;\n                case 'friday':\n                    messageType = 'receive_practice_check';\n                    break;\n                default:\n                    messageType = 'receive_sermon_summary';\n            }\n            const activeRecipients = memberStorage.getMessageRecipients(messageType);\n            recipients = activeRecipients.map((member)=>member.phone);\n            console.log(\"\\uD83D\\uDCF1 \".concat(template.type, \" 메시지 수신자: \").concat(recipients.length, \"명\"));\n        } catch (error) {\n            console.warn('교인 목록 조회 실패, 더미 데이터 사용:', error);\n            // fallback: 더미 연락처\n            recipients = [\n                '010-1111-2222',\n                '010-3333-4444',\n                '010-5555-6666'\n            ];\n        }\n        // 각 교인별로 메시지 생성\n        recipients.forEach((phone)=>{\n            messages.push({\n                template_id: template.id,\n                sermon_id: sermon.id,\n                recipient_phone: phone,\n                content: content,\n                buttons: buttons,\n                scheduled_time: sendDate.toISOString(),\n                status: 'pending'\n            });\n        });\n    });\n    return messages;\n};\n// 특정 날짜의 발송 예정 메시지 조회\nconst getScheduledMessages = (date)=>{\n    // localStorage에서 예약된 메시지 조회\n    const storedMessages = localStorage.getItem('shepherd-care-scheduled-messages');\n    if (!storedMessages) return [];\n    const messages = JSON.parse(storedMessages);\n    const targetDate = date.toDateString();\n    return messages.filter((msg)=>{\n        const msgDate = new Date(msg.scheduled_time).toDateString();\n        return msgDate === targetDate && msg.status === 'pending';\n    });\n};\n// 메시지 예약 저장\nconst saveScheduledMessages = (messages)=>{\n    const existing = localStorage.getItem('shepherd-care-scheduled-messages');\n    const existingMessages = existing ? JSON.parse(existing) : [];\n    const allMessages = [\n        ...existingMessages,\n        ...messages\n    ];\n    localStorage.setItem('shepherd-care-scheduled-messages', JSON.stringify(allMessages));\n    // 새로운 카카오톡 API 큐에도 추가\n    messages.forEach((message)=>{\n        // 템플릿 코드 매핑\n        const templateCodeMap = {\n            'monday_summary': 'SERMON_SUMMARY_001',\n            'wednesday_meditation': 'MEDITATION_002',\n            'friday_practice': 'PRACTICE_CHECK_003'\n        };\n        const templateCode = templateCodeMap[message.template_id];\n        if (templateCode) {\n            var _message_buttons;\n            const queueItem = {\n                type: 'ALIMTALK',\n                template_code: templateCode,\n                recipient_phone: message.recipient_phone,\n                content: message.content,\n                template_variables: extractVariables(message.content, templateCode),\n                buttons: (_message_buttons = message.buttons) === null || _message_buttons === void 0 ? void 0 : _message_buttons.map((btn)=>({\n                        text: btn.text,\n                        type: btn.type,\n                        url: btn.url\n                    })),\n                scheduled_time: message.scheduled_time,\n                priority: 'NORMAL',\n                max_retries: 3,\n                sermon_id: message.sermon_id,\n                member_id: extractMemberIdFromPhone(message.recipient_phone)\n            };\n            _lib_kakao_api__WEBPACK_IMPORTED_MODULE_1__.messageQueue.enqueue(queueItem);\n        }\n    });\n};\n// 메시지 상태 업데이트\nconst updateMessageStatus = (messageId, status)=>{\n    const stored = localStorage.getItem('shepherd-care-scheduled-messages');\n    if (!stored) return;\n    const messages = JSON.parse(stored);\n    const messageIndex = messages.findIndex((msg)=>\"\".concat(msg.sermon_id, \"-\").concat(msg.template_id, \"-\").concat(msg.recipient_phone) === messageId);\n    if (messageIndex !== -1) {\n        messages[messageIndex].status = status;\n        localStorage.setItem('shepherd-care-scheduled-messages', JSON.stringify(messages));\n    }\n};\n// 템플릿 변수 추출 (메시지 내용에서 변수 추출)\nfunction extractVariables(content, templateCode) {\n    // 실제로는 더 정교한 파싱이 필요하지만, 간단한 구현\n    const variables = {};\n    // 교회명 추출\n    if (content.includes('은혜교회')) {\n        variables.church_name = '은혜교회';\n    }\n    // 더 많은 변수 추출 로직을 여기에 추가...\n    return variables;\n}\n// 전화번호로 교인 ID 찾기\nfunction extractMemberIdFromPhone(phone) {\n    try {\n        const { memberStorage } = __webpack_require__(/*! @/lib/member-storage */ \"(app-pages-browser)/./src/lib/member-storage.ts\");\n        const members = memberStorage.getAll();\n        const member = members.find((m)=>m.phone === phone);\n        return member === null || member === void 0 ? void 0 : member.id;\n    } catch (error) {\n        return undefined;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/message-generator.ts\n"));

/***/ })

});