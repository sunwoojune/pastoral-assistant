"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/sermons/new/page",{

/***/ "(app-pages-browser)/./src/lib/kakao-api.ts":
/*!******************************!*\
  !*** ./src/lib/kakao-api.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createKakaoApiClient: () => (/* binding */ createKakaoApiClient),\n/* harmony export */   getAllTemplates: () => (/* binding */ getAllTemplates),\n/* harmony export */   getTemplate: () => (/* binding */ getTemplate),\n/* harmony export */   messageQueue: () => (/* binding */ messageQueue)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// 카카오톡 비즈니스 API 설정\nconst KAKAO_CONFIG = {\n    api_key: process.env.NEXT_PUBLIC_KAKAO_API_KEY || '',\n    sender_key: process.env.NEXT_PUBLIC_KAKAO_SENDER_KEY || '',\n    base_url: 'https://api.solapi.com/messages/v4',\n    timeout: 30000\n};\n// Mock 템플릿 데이터 (실제로는 카카오톡 비즈니스에서 승인받은 템플릿)\nconst MOCK_TEMPLATES = [\n    {\n        template_code: 'SERMON_SUMMARY_001',\n        template_name: '설교 요약 알림',\n        template_content: '안녕하세요! {{church_name}} 교인 여러분 \\uD83D\\uDE4F\\n\\n이번 주일 \"{{sermon_title}}\" 설교의 핵심 내용을 전해드립니다.\\n\\n\\uD83D\\uDCD6 본문: {{scripture}}\\n\\n\\uD83D\\uDD25 핵심 메시지:\\n{{summary}}\\n\\n\\uD83D\\uDCA1 오늘 하루를 시작하며, 이 말씀을 마음에 새기시길 바랍니다.',\n        template_title: '📖 이번 주 설교 요약',\n        security_flag: false,\n        category_code: 'RELIGION',\n        status: 'APPROVED'\n    },\n    {\n        template_code: 'MEDITATION_002',\n        template_name: '수요일 묵상',\n        template_content: '{{church_name}} 교인 여러분, 수요일입니다 ✨\\n\\n일요일 \"{{sermon_title}}\" 말씀이 이번 주 어떻게 적용되고 계신가요?\\n\\n\\uD83E\\uDD14 묵상 질문:\\n{{meditation_questions}}\\n\\n\\uD83D\\uDE4F 오늘 잠시 시간을 내어 하나님과 깊은 대화를 나누시길 바랍니다.',\n        template_title: '🙏 수요일 묵상',\n        security_flag: false,\n        category_code: 'RELIGION',\n        status: 'APPROVED'\n    },\n    {\n        template_code: 'PRACTICE_CHECK_003',\n        template_name: '금요일 실천 점검',\n        template_content: '{{church_name}} 교인 여러분, 한 주간 수고 많으셨습니다 \\uD83D\\uDC4F\\n\\n\"{{sermon_title}}\" 말씀으로 시작한 이번 주가 어떠셨나요?\\n\\n✅ 실천 점검:\\n{{practical_tasks}}\\n\\n\\uD83C\\uDF1F 작은 실천이라도 괜찮습니다. 하나님께서 여러분의 마음을 아시고 기뻐하실 것입니다.\\n\\n\\uD83D\\uDE4F 주일에 뵙겠습니다!',\n        template_title: '💪 금요일 실천 점검',\n        security_flag: false,\n        category_code: 'RELIGION',\n        status: 'APPROVED'\n    }\n];\n// Mock API 클라이언트 (실제 API 연동 전까지 사용)\nclass MockKakaoApiClient {\n    // 알림톡 발송\n    async sendAlimtalk(request) {\n        // 실제 API 호출 시뮬레이션 (2-3초 지연)\n        await new Promise((resolve)=>setTimeout(resolve, Math.random() * 2000 + 1000));\n        // Mock 응답\n        const success = Math.random() > 0.1 // 90% 성공률\n        ;\n        if (success) {\n            var _MOCK_TEMPLATES_find;\n            return {\n                code: '2000',\n                message: 'Success',\n                data: {\n                    mid: Math.floor(Math.random() * 1000000),\n                    type: 'ALIMTALK',\n                    country: 'KR',\n                    subject: request.template_code,\n                    content: Object.entries(request.content).reduce((content, param)=>{\n                        let [key, value] = param;\n                        return content.replace(new RegExp(\"{{\".concat(key, \"}}\"), 'g'), value);\n                    }, ((_MOCK_TEMPLATES_find = MOCK_TEMPLATES.find((t)=>t.template_code === request.template_code)) === null || _MOCK_TEMPLATES_find === void 0 ? void 0 : _MOCK_TEMPLATES_find.template_content) || ''),\n                    to: request.to,\n                    from: request.from || this.config.sender_key,\n                    status: 'SENT',\n                    dateCreated: new Date().toISOString(),\n                    dateUpdated: new Date().toISOString(),\n                    prepaid: true,\n                    account: 'shepherd-care'\n                }\n            };\n        } else {\n            return {\n                code: '4000',\n                message: 'Bad Request',\n                errorMessage: '발송 실패: 수신자 번호가 유효하지 않습니다.'\n            };\n        }\n    }\n    // 메시지 상태 조회\n    async getMessageStatus(messageIds) {\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        const data = messageIds.map((mid)=>{\n            const statuses = [\n                'SENT',\n                'DELIVERED',\n                'READ',\n                'FAILED'\n            ];\n            const status = statuses[Math.floor(Math.random() * statuses.length)];\n            return {\n                mid,\n                status,\n                resultCode: status === 'FAILED' ? '4001' : '2000',\n                resultMessage: status === 'FAILED' ? '발송 실패' : '성공',\n                sentTime: status !== 'FAILED' ? new Date().toISOString() : undefined,\n                deliveredTime: [\n                    'DELIVERED',\n                    'READ'\n                ].includes(status) ? new Date().toISOString() : undefined,\n                readTime: status === 'READ' ? new Date().toISOString() : undefined\n            };\n        });\n        return {\n            code: '2000',\n            message: 'Success',\n            data\n        };\n    }\n    // 잔액 조회 (Mock)\n    async getBalance() {\n        return {\n            balance: 50000,\n            currency: 'KRW'\n        };\n    }\n    constructor(config){\n        this.config = config;\n    }\n}\n// 실제 API 클라이언트 (구현 예시)\nclass RealKakaoApiClient {\n    async makeRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const response = await fetch(url, {\n            ...options,\n            headers: {\n                'Authorization': \"HMAC-SHA256 apiKey=\".concat(this.config.api_key),\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            signal: AbortSignal.timeout(this.config.timeout)\n        });\n        if (!response.ok) {\n            throw new Error(\"API 호출 실패: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response.json();\n    }\n    async sendAlimtalk(request) {\n        const payload = {\n            message: {\n                to: request.to,\n                from: request.from || this.config.sender_key,\n                kakaoOptions: {\n                    pfId: this.config.sender_key,\n                    templateId: request.template_code,\n                    variables: request.content,\n                    buttons: request.buttons\n                }\n            }\n        };\n        return this.makeRequest('/send', {\n            method: 'POST',\n            body: JSON.stringify(payload)\n        });\n    }\n    async getMessageStatus(messageIds) {\n        const query = messageIds.map((id)=>\"messageIds=\".concat(id)).join('&');\n        return this.makeRequest(\"/status?\".concat(query));\n    }\n    constructor(config){\n        this.config = config;\n        this.baseUrl = config.base_url;\n    }\n}\n// API 클라이언트 팩토리\nfunction createKakaoApiClient() {\n    const useMock = !KAKAO_CONFIG.api_key || KAKAO_CONFIG.api_key === '';\n    if (useMock) {\n        console.log('🔧 Mock 카카오톡 API 클라이언트 사용');\n        return new MockKakaoApiClient(KAKAO_CONFIG);\n    } else {\n        console.log('🚀 실제 카카오톡 API 클라이언트 사용');\n        return new RealKakaoApiClient(KAKAO_CONFIG);\n    }\n}\n// 메시지 큐 관리\nconst messageQueue = {\n    // 큐에 메시지 추가\n    enqueue: (item)=>{\n        const queueItem = {\n            id: \"msg-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n            created_at: new Date().toISOString(),\n            status: 'PENDING',\n            retry_count: 0,\n            max_retries: 3,\n            ...item\n        };\n        // localStorage에 저장\n        const existing = localStorage.getItem('shepherd-care-message-queue');\n        const queue = existing ? JSON.parse(existing) : [];\n        queue.push(queueItem);\n        localStorage.setItem('shepherd-care-message-queue', JSON.stringify(queue));\n        return queueItem;\n    },\n    // 대기 중인 메시지 조회\n    getPendingMessages: ()=>{\n        const stored = localStorage.getItem('shepherd-care-message-queue');\n        if (!stored) return [];\n        const queue = JSON.parse(stored);\n        const now = new Date();\n        return queue.filter((item)=>item.status === 'PENDING' && new Date(item.scheduled_time) <= now && item.retry_count < item.max_retries).sort((a, b)=>{\n            // 우선순위별 정렬\n            const priorityOrder = {\n                HIGH: 0,\n                NORMAL: 1,\n                LOW: 2\n            };\n            return priorityOrder[a.priority] - priorityOrder[b.priority];\n        });\n    },\n    // 메시지 상태 업데이트\n    updateStatus: (messageId, status, error)=>{\n        const stored = localStorage.getItem('shepherd-care-message-queue');\n        if (!stored) return;\n        const queue = JSON.parse(stored);\n        const index = queue.findIndex((item)=>item.id === messageId);\n        if (index !== -1) {\n            queue[index].status = status;\n            if (error) queue[index].error_message = error;\n            if (status === 'SENT') queue[index].sent_at = new Date().toISOString();\n            if (status === 'DELIVERED') queue[index].delivered_at = new Date().toISOString();\n            localStorage.setItem('shepherd-care-message-queue', JSON.stringify(queue));\n        }\n    },\n    // 재시도 횟수 증가\n    incrementRetry: (messageId)=>{\n        const stored = localStorage.getItem('shepherd-care-message-queue');\n        if (!stored) return;\n        const queue = JSON.parse(stored);\n        const index = queue.findIndex((item)=>item.id === messageId);\n        if (index !== -1) {\n            queue[index].retry_count += 1;\n            localStorage.setItem('shepherd-care-message-queue', JSON.stringify(queue));\n        }\n    }\n};\n// 템플릿 조회\nfunction getTemplate(templateCode) {\n    return MOCK_TEMPLATES.find((t)=>t.template_code === templateCode);\n}\n// 전체 템플릿 목록\nfunction getAllTemplates() {\n    return MOCK_TEMPLATES;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIva2FrYW8tYXBpLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBU0EsbUJBQW1CO0FBQ25CLE1BQU1BLGVBQStCO0lBQ25DQyxTQUFTQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLHlCQUF5QixJQUFJO0lBQ2xEQyxZQUFZSCxPQUFPQSxDQUFDQyxHQUFHLENBQUNHLDRCQUE0QixJQUFJO0lBQ3hEQyxVQUFVO0lBQ1ZDLFNBQVM7QUFDWDtBQUVBLDJDQUEyQztBQUMzQyxNQUFNQyxpQkFBcUM7SUFDekM7UUFDRUMsZUFBZTtRQUNmQyxlQUFlO1FBQ2ZDLGtCQUFtQjtRQVVuQkMsZ0JBQWdCO1FBQ2hCQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsUUFBUTtJQUNWO0lBQ0E7UUFDRU4sZUFBZTtRQUNmQyxlQUFlO1FBQ2ZDLGtCQUFtQjtRQVFuQkMsZ0JBQWdCO1FBQ2hCQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsUUFBUTtJQUNWO0lBQ0E7UUFDRU4sZUFBZTtRQUNmQyxlQUFlO1FBQ2ZDLGtCQUFtQjtRQVVuQkMsZ0JBQWdCO1FBQ2hCQyxlQUFlO1FBQ2ZDLGVBQWU7UUFDZkMsUUFBUTtJQUNWO0NBQ0Q7QUFFRCxvQ0FBb0M7QUFDcEMsTUFBTUM7SUFPSixTQUFTO0lBQ1QsTUFBTUMsYUFBYUMsT0FBNEIsRUFBaUM7UUFDOUUsNEJBQTRCO1FBQzVCLE1BQU0sSUFBSUMsUUFBUUMsQ0FBQUEsVUFBV0MsV0FBV0QsU0FBU0UsS0FBS0MsTUFBTSxLQUFLLE9BQU87UUFFeEUsVUFBVTtRQUNWLE1BQU1DLFVBQVVGLEtBQUtDLE1BQU0sS0FBSyxJQUFJLFVBQVU7O1FBRTlDLElBQUlDLFNBQVM7Z0JBV0poQjtZQVZQLE9BQU87Z0JBQ0xpQixNQUFNO2dCQUNOQyxTQUFTO2dCQUNUQyxNQUFNO29CQUNKQyxLQUFLTixLQUFLTyxLQUFLLENBQUNQLEtBQUtDLE1BQU0sS0FBSztvQkFDaENPLE1BQU07b0JBQ05DLFNBQVM7b0JB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LE9BQU9uSSxlQUFlaUMsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFakMsYUFBYSxLQUFLa0k7QUFDdEQ7QUFFQSxZQUFZO0FBQ0wsU0FBU0M7SUFDZCxPQUFPcEk7QUFDVCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzd2puaVxcUGFzdG9yYWwgQXNzaXN0YW50XFxzcmNcXGxpYlxca2FrYW8tYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBLYWthb0FwaUNvbmZpZywgXG4gIEFsaW10YWxrU2VuZFJlcXVlc3QsIFxuICBBbGltdGFsa1NlbmRSZXNwb25zZSxcbiAgTWVzc2FnZVN0YXR1c1Jlc3BvbnNlLFxuICBBbGltdGFsa1RlbXBsYXRlLFxuICBNZXNzYWdlUXVldWVJdGVtXG59IGZyb20gJ0AvdHlwZXMva2FrYW8tYXBpJ1xuXG4vLyDsubTsubTsmKTthqEg67mE7KaI64uI7IqkIEFQSSDshKTsoJVcbmNvbnN0IEtBS0FPX0NPTkZJRzogS2FrYW9BcGlDb25maWcgPSB7XG4gIGFwaV9rZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tBS0FPX0FQSV9LRVkgfHwgJycsXG4gIHNlbmRlcl9rZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0tBS0FPX1NFTkRFUl9LRVkgfHwgJycsXG4gIGJhc2VfdXJsOiAnaHR0cHM6Ly9hcGkuc29sYXBpLmNvbS9tZXNzYWdlcy92NCcsIC8vIFNvbGFwaSDsmIjsi5wgKOyLpOygnCDsgqzsmqntlZjripQg7ISc67mE7Iqk7JeQIOuUsOudvCDrs4Dqsr0pXG4gIHRpbWVvdXQ6IDMwMDAwXG59XG5cbi8vIE1vY2sg7YWc7ZSM66a/IOuNsOydtO2EsCAo7Iuk7KCc66Gc64qUIOy5tOy5tOyYpO2GoSDruYTspojri4jsiqTsl5DshJwg7Iq57J2467Cb7J2AIO2FnO2UjOumvylcbmNvbnN0IE1PQ0tfVEVNUExBVEVTOiBBbGltdGFsa1RlbXBsYXRlW10gPSBbXG4gIHtcbiAgICB0ZW1wbGF0ZV9jb2RlOiAnU0VSTU9OX1NVTU1BUllfMDAxJyxcbiAgICB0ZW1wbGF0ZV9uYW1lOiAn7ISk6rWQIOyalOyVvSDslYzrprwnLFxuICAgIHRlbXBsYXRlX2NvbnRlbnQ6IGDslYjrhZXtlZjshLjsmpQhIHt7Y2h1cmNoX25hbWV9fSDqtZDsnbgg7Jes65+s67aEIPCfmY9cblxu7J2067KIIOyjvOydvCBcInt7c2VybW9uX3RpdGxlfX1cIiDshKTqtZDsnZgg7ZW17IusIOuCtOyaqeydhCDsoITtlbTrk5zrpr3ri4jri6QuXG5cbvCfk5Yg67O466y4OiB7e3NjcmlwdHVyZX19XG5cbvCflKUg7ZW17IusIOuplOyLnOyngDpcbnt7c3VtbWFyeX19XG5cbvCfkqEg7Jik64qYIO2VmOujqOulvCDsi5zsnpHtlZjrqbAsIOydtCDrp5DslIDsnYQg66eI7J2M7JeQIOyDiOq4sOyLnOq4uCDrsJTrno3ri4jri6QuYCxcbiAgICB0ZW1wbGF0ZV90aXRsZTogJ/Cfk5Yg7J2067KIIOyjvCDshKTqtZAg7JqU7JW9JyxcbiAgICBzZWN1cml0eV9mbGFnOiBmYWxzZSxcbiAgICBjYXRlZ29yeV9jb2RlOiAnUkVMSUdJT04nLFxuICAgIHN0YXR1czogJ0FQUFJPVkVEJ1xuICB9LFxuICB7XG4gICAgdGVtcGxhdGVfY29kZTogJ01FRElUQVRJT05fMDAyJyxcbiAgICB0ZW1wbGF0ZV9uYW1lOiAn7IiY7JqU7J28IOusteyDgScsXG4gICAgdGVtcGxhdGVfY29udGVudDogYHt7Y2h1cmNoX25hbWV9fSDqtZDsnbgg7Jes65+s67aELCDsiJjsmpTsnbzsnoXri4jri6Qg4pyoXG5cbuydvOyalOydvCBcInt7c2VybW9uX3RpdGxlfX1cIiDrp5DslIDsnbQg7J2067KIIOyjvCDslrTrlrvqsowg7KCB7Jqp65CY6rOgIOqzhOyLoOqwgOyalD9cblxu8J+klCDrrLXsg4Eg7KeI66y4Olxue3ttZWRpdGF0aW9uX3F1ZXN0aW9uc319XG5cbvCfmY8g7Jik64qYIOyeoOyLnCDsi5zqsITsnYQg64K07Ja0IO2VmOuCmOuLmOqzvCDquYrsnYAg64yA7ZmU66W8IOuCmOuIhOyLnOq4uCDrsJTrno3ri4jri6QuYCxcbiAgICB0ZW1wbGF0ZV90aXRsZTogJ/CfmY8g7IiY7JqU7J28IOusteyDgScsXG4gICAgc2VjdXJpdHlfZmxhZzogZmFsc2UsXG4gICAgY2F0ZWdvcnlfY29kZTogJ1JFTElHSU9OJyxcbiAgICBzdGF0dXM6ICdBUFBST1ZFRCdcbiAgfSxcbiAge1xuICAgIHRlbXBsYXRlX2NvZGU6ICdQUkFDVElDRV9DSEVDS18wMDMnLFxuICAgIHRlbXBsYXRlX25hbWU6ICfquIjsmpTsnbwg7Iuk7LKcIOygkOqygCcsXG4gICAgdGVtcGxhdGVfY29udGVudDogYHt7Y2h1cmNoX25hbWV9fSDqtZDsnbgg7Jes65+s67aELCDtlZwg7KO86rCEIOyImOqzoCDrp47snLzshajsirXri4jri6Qg8J+Rj1xuXG5cInt7c2VybW9uX3RpdGxlfX1cIiDrp5DslIDsnLzroZwg7Iuc7J6R7ZWcIOydtOuyiCDso7zqsIAg7Ja065ag7IWo64KY7JqUP1xuXG7inIUg7Iuk7LKcIOygkOqygDpcbnt7cHJhY3RpY2FsX3Rhc2tzfX1cblxu8J+MnyDsnpHsnYAg7Iuk7LKc7J20652864+EIOq0nOywruyKteuLiOuLpC4g7ZWY64KY64uY6ruY7IScIOyXrOufrOu2hOydmCDrp4jsnYzsnYQg7JWE7Iuc6rOgIOq4sOu7kO2VmOyLpCDqsoPsnoXri4jri6QuXG5cbvCfmY8g7KO87J287JeQIOu1meqyoOyKteuLiOuLpCFgLFxuICAgIHRlbXBsYXRlX3RpdGxlOiAn8J+SqiDquIjsmpTsnbwg7Iuk7LKcIOygkOqygCcsXG4gICAgc2VjdXJpdHlfZmxhZzogZmFsc2UsXG4gICAgY2F0ZWdvcnlfY29kZTogJ1JFTElHSU9OJyxcbiAgICBzdGF0dXM6ICdBUFBST1ZFRCdcbiAgfVxuXVxuXG4vLyBNb2NrIEFQSSDtgbTrnbzsnbTslrjtirggKOyLpOygnCBBUEkg7Jew64+ZIOyghOq5jOyngCDsgqzsmqkpXG5jbGFzcyBNb2NrS2FrYW9BcGlDbGllbnQge1xuICBwcml2YXRlIGNvbmZpZzogS2FrYW9BcGlDb25maWdcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEtha2FvQXBpQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgfVxuXG4gIC8vIOyVjOumvO2GoSDrsJzshqFcbiAgYXN5bmMgc2VuZEFsaW10YWxrKHJlcXVlc3Q6IEFsaW10YWxrU2VuZFJlcXVlc3QpOiBQcm9taXNlPEFsaW10YWxrU2VuZFJlc3BvbnNlPiB7XG4gICAgLy8g7Iuk7KCcIEFQSSDtmLjstpwg7Iuc666s66CI7J207IWYICgyLTPstIgg7KeA7JewKVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBNYXRoLnJhbmRvbSgpICogMjAwMCArIDEwMDApKVxuXG4gICAgLy8gTW9jayDsnZHri7VcbiAgICBjb25zdCBzdWNjZXNzID0gTWF0aC5yYW5kb20oKSA+IDAuMSAvLyA5MCUg7ISx6rO166WgXG5cbiAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogJzIwMDAnLFxuICAgICAgICBtZXNzYWdlOiAnU3VjY2VzcycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBtaWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApLFxuICAgICAgICAgIHR5cGU6ICdBTElNVEFMSycsXG4gICAgICAgICAgY291bnRyeTogJ0tSJyxcbiAgICAgICAgICBzdWJqZWN0OiByZXF1ZXN0LnRlbXBsYXRlX2NvZGUsXG4gICAgICAgICAgY29udGVudDogT2JqZWN0LmVudHJpZXMocmVxdWVzdC5jb250ZW50KS5yZWR1Y2UoKGNvbnRlbnQsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShuZXcgUmVnRXhwKGB7eyR7a2V5fX19YCwgJ2cnKSwgdmFsdWUpXG4gICAgICAgICAgfSwgTU9DS19URU1QTEFURVMuZmluZCh0ID0+IHQudGVtcGxhdGVfY29kZSA9PT0gcmVxdWVzdC50ZW1wbGF0ZV9jb2RlKT8udGVtcGxhdGVfY29udGVudCB8fCAnJyksXG4gICAgICAgICAgdG86IHJlcXVlc3QudG8sXG4gICAgICAgICAgZnJvbTogcmVxdWVzdC5mcm9tIHx8IHRoaXMuY29uZmlnLnNlbmRlcl9rZXksXG4gICAgICAgICAgc3RhdHVzOiAnU0VOVCcsXG4gICAgICAgICAgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXRlVXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHByZXBhaWQ6IHRydWUsXG4gICAgICAgICAgYWNjb3VudDogJ3NoZXBoZXJkLWNhcmUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogJzQwMDAnLFxuICAgICAgICBtZXNzYWdlOiAnQmFkIFJlcXVlc3QnLFxuICAgICAgICBlcnJvck1lc3NhZ2U6ICfrsJzshqEg7Iuk7YyoOiDsiJjsi6DsnpAg67KI7Zi46rCAIOycoO2aqO2VmOyngCDslYrsirXri4jri6QuJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIOuplOyLnOyngCDsg4Htg5wg7KGw7ZqMXG4gIGFzeW5jIGdldE1lc3NhZ2VTdGF0dXMobWVzc2FnZUlkczogbnVtYmVyW10pOiBQcm9taXNlPE1lc3NhZ2VTdGF0dXNSZXNwb25zZT4ge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKVxuXG4gICAgY29uc3QgZGF0YSA9IG1lc3NhZ2VJZHMubWFwKG1pZCA9PiB7XG4gICAgICBjb25zdCBzdGF0dXNlcyA9IFsnU0VOVCcsICdERUxJVkVSRUQnLCAnUkVBRCcsICdGQUlMRUQnXVxuICAgICAgY29uc3Qgc3RhdHVzID0gc3RhdHVzZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3RhdHVzZXMubGVuZ3RoKV0gYXMgYW55XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1pZCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICByZXN1bHRDb2RlOiBzdGF0dXMgPT09ICdGQUlMRUQnID8gJzQwMDEnIDogJzIwMDAnLFxuICAgICAgICByZXN1bHRNZXNzYWdlOiBzdGF0dXMgPT09ICdGQUlMRUQnID8gJ+uwnOyGoSDsi6TtjKgnIDogJ+yEseqztScsXG4gICAgICAgIHNlbnRUaW1lOiBzdGF0dXMgIT09ICdGQUlMRUQnID8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkLFxuICAgICAgICBkZWxpdmVyZWRUaW1lOiBbJ0RFTElWRVJFRCcsICdSRUFEJ10uaW5jbHVkZXMoc3RhdHVzKSA/IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVhZFRpbWU6IHN0YXR1cyA9PT0gJ1JFQUQnID8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB7XG4gICAgICBjb2RlOiAnMjAwMCcsXG4gICAgICBtZXNzYWdlOiAnU3VjY2VzcycsXG4gICAgICBkYXRhXG4gICAgfVxuICB9XG5cbiAgLy8g7J6U7JWhIOyhsO2ajCAoTW9jaylcbiAgYXN5bmMgZ2V0QmFsYW5jZSgpOiBQcm9taXNlPHsgYmFsYW5jZTogbnVtYmVyOyBjdXJyZW5jeTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFsYW5jZTogNTAwMDAsIC8vIDXrp4zsm5BcbiAgICAgIGN1cnJlbmN5OiAnS1JXJ1xuICAgIH1cbiAgfVxufVxuXG4vLyDsi6TsoJwgQVBJIO2BtOudvOydtOyWuO2KuCAo6rWs7ZiEIOyYiOyLnClcbmNsYXNzIFJlYWxLYWthb0FwaUNsaWVudCB7XG4gIHByaXZhdGUgY29uZmlnOiBLYWthb0FwaUNvbmZpZ1xuICBwcml2YXRlIGJhc2VVcmw6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogS2FrYW9BcGlDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZ1xuICAgIHRoaXMuYmFzZVVybCA9IGNvbmZpZy5iYXNlX3VybFxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdDxUPihlbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7ZW5kcG9pbnR9YFxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBITUFDLVNIQTI1NiBhcGlLZXk9JHt0aGlzLmNvbmZpZy5hcGlfa2V5fWAsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIC4uLm9wdGlvbnMuaGVhZGVyc1xuICAgICAgfSxcbiAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCh0aGlzLmNvbmZpZy50aW1lb3V0KVxuICAgIH0pXG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSDtmLjstpwg7Iuk7YyoOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9XG5cbiAgYXN5bmMgc2VuZEFsaW10YWxrKHJlcXVlc3Q6IEFsaW10YWxrU2VuZFJlcXVlc3QpOiBQcm9taXNlPEFsaW10YWxrU2VuZFJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgdG86IHJlcXVlc3QudG8sXG4gICAgICAgIGZyb206IHJlcXVlc3QuZnJvbSB8fCB0aGlzLmNvbmZpZy5zZW5kZXJfa2V5LFxuICAgICAgICBrYWthb09wdGlvbnM6IHtcbiAgICAgICAgICBwZklkOiB0aGlzLmNvbmZpZy5zZW5kZXJfa2V5LFxuICAgICAgICAgIHRlbXBsYXRlSWQ6IHJlcXVlc3QudGVtcGxhdGVfY29kZSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHJlcXVlc3QuY29udGVudCxcbiAgICAgICAgICBidXR0b25zOiByZXF1ZXN0LmJ1dHRvbnNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KCcvc2VuZCcsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZClcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZ2V0TWVzc2FnZVN0YXR1cyhtZXNzYWdlSWRzOiBudW1iZXJbXSk6IFByb21pc2U8TWVzc2FnZVN0YXR1c1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgcXVlcnkgPSBtZXNzYWdlSWRzLm1hcChpZCA9PiBgbWVzc2FnZUlkcz0ke2lkfWApLmpvaW4oJyYnKVxuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KGAvc3RhdHVzPyR7cXVlcnl9YClcbiAgfVxufVxuXG4vLyBBUEkg7YG065287J207Ja47Yq4IO2Mqe2GoOumrFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtha2FvQXBpQ2xpZW50KCk6IE1vY2tLYWthb0FwaUNsaWVudCB8IFJlYWxLYWthb0FwaUNsaWVudCB7XG4gIGNvbnN0IHVzZU1vY2sgPSAhS0FLQU9fQ09ORklHLmFwaV9rZXkgfHwgS0FLQU9fQ09ORklHLmFwaV9rZXkgPT09ICcnXG4gIFxuICBpZiAodXNlTW9jaykge1xuICAgIGNvbnNvbGUubG9nKCfwn5SnIE1vY2sg7Lm07Lm07Jik7YahIEFQSSDtgbTrnbzsnbTslrjtirgg7IKs7JqpJylcbiAgICByZXR1cm4gbmV3IE1vY2tLYWthb0FwaUNsaWVudChLQUtBT19DT05GSUcpXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ/CfmoAg7Iuk7KCcIOy5tOy5tOyYpO2GoSBBUEkg7YG065287J207Ja47Yq4IOyCrOyaqScpXG4gICAgcmV0dXJuIG5ldyBSZWFsS2FrYW9BcGlDbGllbnQoS0FLQU9fQ09ORklHKVxuICB9XG59XG5cbi8vIOuplOyLnOyngCDtgZAg6rSA66asXG5leHBvcnQgY29uc3QgbWVzc2FnZVF1ZXVlID0ge1xuICAvLyDtgZDsl5Ag66mU7Iuc7KeAIOy2lOqwgFxuICBlbnF1ZXVlOiAoaXRlbTogT21pdDxNZXNzYWdlUXVldWVJdGVtLCAnaWQnIHwgJ2NyZWF0ZWRfYXQnIHwgJ3N0YXR1cycgfCAncmV0cnlfY291bnQnPik6IE1lc3NhZ2VRdWV1ZUl0ZW0gPT4ge1xuICAgIGNvbnN0IHF1ZXVlSXRlbTogTWVzc2FnZVF1ZXVlSXRlbSA9IHtcbiAgICAgIGlkOiBgbXNnLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXR1czogJ1BFTkRJTkcnLFxuICAgICAgcmV0cnlfY291bnQ6IDAsXG4gICAgICBtYXhfcmV0cmllczogMyxcbiAgICAgIC4uLml0ZW1cbiAgICB9XG5cbiAgICAvLyBsb2NhbFN0b3JhZ2Xsl5Ag7KCA7J6lXG4gICAgY29uc3QgZXhpc3RpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hlcGhlcmQtY2FyZS1tZXNzYWdlLXF1ZXVlJylcbiAgICBjb25zdCBxdWV1ZTogTWVzc2FnZVF1ZXVlSXRlbVtdID0gZXhpc3RpbmcgPyBKU09OLnBhcnNlKGV4aXN0aW5nKSA6IFtdXG4gICAgcXVldWUucHVzaChxdWV1ZUl0ZW0pXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NoZXBoZXJkLWNhcmUtbWVzc2FnZS1xdWV1ZScsIEpTT04uc3RyaW5naWZ5KHF1ZXVlKSlcblxuICAgIHJldHVybiBxdWV1ZUl0ZW1cbiAgfSxcblxuICAvLyDrjIDquLAg7KSR7J24IOuplOyLnOyngCDsobDtmoxcbiAgZ2V0UGVuZGluZ01lc3NhZ2VzOiAoKTogTWVzc2FnZVF1ZXVlSXRlbVtdID0+IHtcbiAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hlcGhlcmQtY2FyZS1tZXNzYWdlLXF1ZXVlJylcbiAgICBpZiAoIXN0b3JlZCkgcmV0dXJuIFtdXG5cbiAgICBjb25zdCBxdWV1ZTogTWVzc2FnZVF1ZXVlSXRlbVtdID0gSlNPTi5wYXJzZShzdG9yZWQpXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgIFxuICAgIHJldHVybiBxdWV1ZS5maWx0ZXIoaXRlbSA9PiBcbiAgICAgIGl0ZW0uc3RhdHVzID09PSAnUEVORElORycgJiYgXG4gICAgICBuZXcgRGF0ZShpdGVtLnNjaGVkdWxlZF90aW1lKSA8PSBub3cgJiZcbiAgICAgIGl0ZW0ucmV0cnlfY291bnQgPCBpdGVtLm1heF9yZXRyaWVzXG4gICAgKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAvLyDsmrDshKDsiJzsnITrs4Qg7KCV66CsXG4gICAgICBjb25zdCBwcmlvcml0eU9yZGVyID0geyBISUdIOiAwLCBOT1JNQUw6IDEsIExPVzogMiB9XG4gICAgICByZXR1cm4gcHJpb3JpdHlPcmRlclthLnByaW9yaXR5XSAtIHByaW9yaXR5T3JkZXJbYi5wcmlvcml0eV1cbiAgICB9KVxuICB9LFxuXG4gIC8vIOuplOyLnOyngCDsg4Htg5wg7JeF642w7J207Yq4XG4gIHVwZGF0ZVN0YXR1czogKG1lc3NhZ2VJZDogc3RyaW5nLCBzdGF0dXM6IE1lc3NhZ2VRdWV1ZUl0ZW1bJ3N0YXR1cyddLCBlcnJvcj86IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaGVwaGVyZC1jYXJlLW1lc3NhZ2UtcXVldWUnKVxuICAgIGlmICghc3RvcmVkKSByZXR1cm5cblxuICAgIGNvbnN0IHF1ZXVlOiBNZXNzYWdlUXVldWVJdGVtW10gPSBKU09OLnBhcnNlKHN0b3JlZClcbiAgICBjb25zdCBpbmRleCA9IHF1ZXVlLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IG1lc3NhZ2VJZClcbiAgICBcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBxdWV1ZVtpbmRleF0uc3RhdHVzID0gc3RhdHVzXG4gICAgICBpZiAoZXJyb3IpIHF1ZXVlW2luZGV4XS5lcnJvcl9tZXNzYWdlID0gZXJyb3JcbiAgICAgIGlmIChzdGF0dXMgPT09ICdTRU5UJykgcXVldWVbaW5kZXhdLnNlbnRfYXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIGlmIChzdGF0dXMgPT09ICdERUxJVkVSRUQnKSBxdWV1ZVtpbmRleF0uZGVsaXZlcmVkX2F0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICBcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaGVwaGVyZC1jYXJlLW1lc3NhZ2UtcXVldWUnLCBKU09OLnN0cmluZ2lmeShxdWV1ZSkpXG4gICAgfVxuICB9LFxuXG4gIC8vIOyerOyLnOuPhCDtmp/siJgg7Kad6rCAXG4gIGluY3JlbWVudFJldHJ5OiAobWVzc2FnZUlkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2hlcGhlcmQtY2FyZS1tZXNzYWdlLXF1ZXVlJylcbiAgICBpZiAoIXN0b3JlZCkgcmV0dXJuXG5cbiAgICBjb25zdCBxdWV1ZTogTWVzc2FnZVF1ZXVlSXRlbVtdID0gSlNPTi5wYXJzZShzdG9yZWQpXG4gICAgY29uc3QgaW5kZXggPSBxdWV1ZS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBtZXNzYWdlSWQpXG4gICAgXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcXVldWVbaW5kZXhdLnJldHJ5X2NvdW50ICs9IDFcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaGVwaGVyZC1jYXJlLW1lc3NhZ2UtcXVldWUnLCBKU09OLnN0cmluZ2lmeShxdWV1ZSkpXG4gICAgfVxuICB9XG59XG5cbi8vIO2FnO2UjOumvyDsobDtmoxcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZSh0ZW1wbGF0ZUNvZGU6IHN0cmluZyk6IEFsaW10YWxrVGVtcGxhdGUgfCB1bmRlZmluZWQge1xuICByZXR1cm4gTU9DS19URU1QTEFURVMuZmluZCh0ID0+IHQudGVtcGxhdGVfY29kZSA9PT0gdGVtcGxhdGVDb2RlKVxufVxuXG4vLyDsoITssrQg7YWc7ZSM66a/IOuqqeuhnVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbFRlbXBsYXRlcygpOiBBbGltdGFsa1RlbXBsYXRlW10ge1xuICByZXR1cm4gTU9DS19URU1QTEFURVNcbn0iXSwibmFtZXMiOlsiS0FLQU9fQ09ORklHIiwiYXBpX2tleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19LQUtBT19BUElfS0VZIiwic2VuZGVyX2tleSIsIk5FWFRfUFVCTElDX0tBS0FPX1NFTkRFUl9LRVkiLCJiYXNlX3VybCIsInRpbWVvdXQiLCJNT0NLX1RFTVBMQVRFUyIsInRlbXBsYXRlX2NvZGUiLCJ0ZW1wbGF0ZV9uYW1lIiwidGVtcGxhdGVfY29udGVudCIsInRlbXBsYXRlX3RpdGxlIiwic2VjdXJpdHlfZmxhZyIsImNhdGVnb3J5X2NvZGUiLCJzdGF0dXMiLCJNb2NrS2FrYW9BcGlDbGllbnQiLCJzZW5kQWxpbXRhbGsiLCJyZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiTWF0aCIsInJhbmRvbSIsInN1Y2Nlc3MiLCJjb2RlIiwibWVzc2FnZSIsImRhdGEiLCJtaWQiLCJmbG9vciIsInR5cGUiLCJjb3VudHJ5Iiwic3ViamVjdCIsImNvbnRlbnQiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVkdWNlIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwiUmVnRXhwIiwiZmluZCIsInQiLCJ0byIsImZyb20iLCJjb25maWciLCJkYXRlQ3JlYXRlZCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRhdGVVcGRhdGVkIiwicHJlcGFpZCIsImFjY291bnQiLCJlcnJvck1lc3NhZ2UiLCJnZXRNZXNzYWdlU3RhdHVzIiwibWVzc2FnZUlkcyIsIm1hcCIsInN0YXR1c2VzIiwibGVuZ3RoIiwicmVzdWx0Q29kZSIsInJlc3VsdE1lc3NhZ2UiLCJzZW50VGltZSIsInVuZGVmaW5lZCIsImRlbGl2ZXJlZFRpbWUiLCJpbmNsdWRlcyIsInJlYWRUaW1lIiwiZ2V0QmFsYW5jZSIsImJhbGFuY2UiLCJjdXJyZW5jeSIsIlJlYWxLYWthb0FwaUNsaWVudCIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnQiLCJvcHRpb25zIiwidXJsIiwiYmFzZVVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwic2lnbmFsIiwiQWJvcnRTaWduYWwiLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImpzb24iLCJwYXlsb2FkIiwia2FrYW9PcHRpb25zIiwicGZJZCIsInRlbXBsYXRlSWQiLCJ2YXJpYWJsZXMiLCJidXR0b25zIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJxdWVyeSIsImlkIiwiam9pbiIsImNyZWF0ZUtha2FvQXBpQ2xpZW50IiwidXNlTW9jayIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlUXVldWUiLCJlbnF1ZXVlIiwiaXRlbSIsInF1ZXVlSXRlbSIsIm5vdyIsInRvU3RyaW5nIiwic3Vic3RyIiwiY3JlYXRlZF9hdCIsInJldHJ5X2NvdW50IiwibWF4X3JldHJpZXMiLCJleGlzdGluZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJxdWV1ZSIsInBhcnNlIiwicHVzaCIsInNldEl0ZW0iLCJnZXRQZW5kaW5nTWVzc2FnZXMiLCJzdG9yZWQiLCJmaWx0ZXIiLCJzY2hlZHVsZWRfdGltZSIsInNvcnQiLCJhIiwiYiIsInByaW9yaXR5T3JkZXIiLCJISUdIIiwiTk9STUFMIiwiTE9XIiwicHJpb3JpdHkiLCJ1cGRhdGVTdGF0dXMiLCJtZXNzYWdlSWQiLCJlcnJvciIsImluZGV4IiwiZmluZEluZGV4IiwiZXJyb3JfbWVzc2FnZSIsInNlbnRfYXQiLCJkZWxpdmVyZWRfYXQiLCJpbmNyZW1lbnRSZXRyeSIsImdldFRlbXBsYXRlIiwidGVtcGxhdGVDb2RlIiwiZ2V0QWxsVGVtcGxhdGVzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/kakao-api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/message-generator.ts":
/*!**************************************!*\
  !*** ./src/lib/message-generator.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateWeeklyMessages: () => (/* binding */ generateWeeklyMessages),\n/* harmony export */   getScheduledMessages: () => (/* binding */ getScheduledMessages),\n/* harmony export */   saveScheduledMessages: () => (/* binding */ saveScheduledMessages),\n/* harmony export */   updateMessageStatus: () => (/* binding */ updateMessageStatus)\n/* harmony export */ });\n/* harmony import */ var _types_message_template__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/message-template */ \"(app-pages-browser)/./src/types/message-template.ts\");\n/* harmony import */ var _lib_kakao_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/kakao-api */ \"(app-pages-browser)/./src/lib/kakao-api.ts\");\n\n\n// 메시지 생성 설정\nconst MESSAGE_CONFIG = {\n    church_name: '은혜교회',\n    pastor_phone: '010-1234-5678',\n    domain: 'https://your-domain.com' // 실제 배포 시 변경 필요\n};\n// 템플릿 변수 치환 함수\nconst replaceTemplateVariables = (template, variables)=>{\n    return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key)=>{\n        return variables[key] || match;\n    });\n};\n// 설교 내용을 바탕으로 각 요일별 메시지 생성\nconst generateWeeklyMessages = (sermon)=>{\n    const messages = [];\n    // 기본 변수들\n    const baseVariables = {\n        church_name: MESSAGE_CONFIG.church_name,\n        pastor_phone: MESSAGE_CONFIG.pastor_phone,\n        domain: MESSAGE_CONFIG.domain,\n        sermon_id: sermon.id,\n        sermon_title: sermon.title,\n        scripture: sermon.scripture,\n        summary: sermon.summary\n    };\n    // 설교 날짜 기준으로 발송 날짜 계산\n    const sermonDate = new Date(sermon.date);\n    _types_message_template__WEBPACK_IMPORTED_MODULE_0__.MESSAGE_TEMPLATES.forEach((template)=>{\n        var _template_button_template;\n        // 발송 날짜 계산\n        const sendDate = new Date(sermonDate);\n        const daysToAdd = template.schedule.day_of_week - sermonDate.getDay();\n        sendDate.setDate(sermonDate.getDate() + (daysToAdd > 0 ? daysToAdd : daysToAdd + 7));\n        sendDate.setHours(template.schedule.hour, template.schedule.minute, 0, 0);\n        // 각 템플릿별 특화 변수\n        let specificVariables = {\n            ...baseVariables\n        };\n        switch(template.type){\n            case 'monday':\n                break;\n            case 'wednesday':\n                // 수요일: 묵상 질문 추출\n                const meditationLines = sermon.meditation.split('\\n');\n                const questions = meditationLines.filter((line)=>line.includes('?') || line.includes('묵상')).slice(0, 2).map((q, i)=>\"\".concat(i + 1, \". \").concat(q.trim())).join('\\n');\n                specificVariables.meditation_questions = questions || '오늘 받은 은혜를 돌아보며 하나님께 감사드리세요.';\n                break;\n            case 'friday':\n                // 금요일: 실천과제 체크리스트\n                const tasks = sermon.practical_tasks.slice(0, 3).map((task, i)=>\"\".concat(i + 1, \". \").concat(task)).join('\\n');\n                specificVariables.practical_tasks = tasks;\n                break;\n        }\n        // 메시지 내용 생성\n        const content = replaceTemplateVariables(template.content_template, specificVariables);\n        // 버튼 URL 변수 치환\n        const buttons = ((_template_button_template = template.button_template) === null || _template_button_template === void 0 ? void 0 : _template_button_template.map((btn)=>({\n                ...btn,\n                url: btn.url ? replaceTemplateVariables(btn.url, specificVariables) : btn.url\n            }))) || [];\n        // 실제 교인 목록에서 메시지 수신자 조회\n        let recipients = [];\n        try {\n            const { memberStorage } = __webpack_require__(/*! @/lib/member-storage */ \"(app-pages-browser)/./src/lib/member-storage.ts\");\n            // 메시지 타입별 수신자 조회\n            let messageType;\n            switch(template.type){\n                case 'monday':\n                    messageType = 'receive_sermon_summary';\n                    break;\n                case 'wednesday':\n                    messageType = 'receive_meditation';\n                    break;\n                case 'friday':\n                    messageType = 'receive_practice_check';\n                    break;\n                default:\n                    messageType = 'receive_sermon_summary';\n            }\n            const activeRecipients = memberStorage.getMessageRecipients(messageType);\n            recipients = activeRecipients.map((member)=>member.phone);\n            console.log(\"\\uD83D\\uDCF1 \".concat(template.type, \" 메시지 수신자: \").concat(recipients.length, \"명\"));\n        } catch (error) {\n            console.warn('교인 목록 조회 실패, 더미 데이터 사용:', error);\n            // fallback: 더미 연락처\n            recipients = [\n                '010-1111-2222',\n                '010-3333-4444',\n                '010-5555-6666'\n            ];\n        }\n        // 각 교인별로 메시지 생성\n        recipients.forEach((phone)=>{\n            messages.push({\n                template_id: template.id,\n                sermon_id: sermon.id,\n                recipient_phone: phone,\n                content: content,\n                buttons: buttons,\n                scheduled_time: sendDate.toISOString(),\n                status: 'pending'\n            });\n        });\n    });\n    return messages;\n};\n// 특정 날짜의 발송 예정 메시지 조회\nconst getScheduledMessages = (date)=>{\n    // localStorage에서 예약된 메시지 조회\n    const storedMessages = localStorage.getItem('shepherd-care-scheduled-messages');\n    if (!storedMessages) return [];\n    const messages = JSON.parse(storedMessages);\n    const targetDate = date.toDateString();\n    return messages.filter((msg)=>{\n        const msgDate = new Date(msg.scheduled_time).toDateString();\n        return msgDate === targetDate && msg.status === 'pending';\n    });\n};\n// 메시지 예약 저장\nconst saveScheduledMessages = (messages)=>{\n    const existing = localStorage.getItem('shepherd-care-scheduled-messages');\n    const existingMessages = existing ? JSON.parse(existing) : [];\n    const allMessages = [\n        ...existingMessages,\n        ...messages\n    ];\n    localStorage.setItem('shepherd-care-scheduled-messages', JSON.stringify(allMessages));\n    // 새로운 카카오톡 API 큐에도 추가\n    messages.forEach((message)=>{\n        // 템플릿 코드 매핑\n        const templateCodeMap = {\n            'monday_summary': 'SERMON_SUMMARY_001',\n            'wednesday_meditation': 'MEDITATION_002',\n            'friday_practice': 'PRACTICE_CHECK_003'\n        };\n        const templateCode = templateCodeMap[message.template_id];\n        if (templateCode) {\n            var _message_buttons;\n            const queueItem = {\n                type: 'ALIMTALK',\n                template_code: templateCode,\n                recipient_phone: message.recipient_phone,\n                content: message.content,\n                template_variables: extractVariables(message.content, templateCode),\n                buttons: (_message_buttons = message.buttons) === null || _message_buttons === void 0 ? void 0 : _message_buttons.map((btn)=>({\n                        text: btn.text,\n                        type: btn.type,\n                        url: btn.url\n                    })),\n                scheduled_time: message.scheduled_time,\n                priority: 'NORMAL',\n                max_retries: 3,\n                sermon_id: message.sermon_id,\n                member_id: extractMemberIdFromPhone(message.recipient_phone)\n            };\n            _lib_kakao_api__WEBPACK_IMPORTED_MODULE_1__.messageQueue.enqueue(queueItem);\n        }\n    });\n};\n// 메시지 상태 업데이트\nconst updateMessageStatus = (messageId, status)=>{\n    const stored = localStorage.getItem('shepherd-care-scheduled-messages');\n    if (!stored) return;\n    const messages = JSON.parse(stored);\n    const messageIndex = messages.findIndex((msg)=>\"\".concat(msg.sermon_id, \"-\").concat(msg.template_id, \"-\").concat(msg.recipient_phone) === messageId);\n    if (messageIndex !== -1) {\n        messages[messageIndex].status = status;\n        localStorage.setItem('shepherd-care-scheduled-messages', JSON.stringify(messages));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/message-generator.ts\n"));

/***/ })

});